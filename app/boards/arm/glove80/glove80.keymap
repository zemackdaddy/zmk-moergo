/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define MEH(key) LS(LC(LA(key)))
#define HYP(key) LS(LC(LA(LG(key))))

&mt {
		tapping-term-ms = <210>;
		flavor = "tap-preferred";
		quick_tap_ms = <200>;
};

&lt {
		quick_tap_ms = <200>;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

			pd3: prog_dvorak_rcurly_three_def {
				compatible = "zmk,behavior-mod-morph";
				label = "pd3";
				mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
				#binding-cells = <0>;
				bindings = <&kp RBRC>, <&kp KP_N3>;
			};

			comma_inner_morph: comma_inner_morph {
				compatible = "zmk,behavior-mod-morph";
				label = "cim";
				#binding-cells = <0>;
				bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
				mods = <(MOD_LCTL|MOD_RCTL)>;
			};

			comma_morph: comma_morph_def {
				compatible = "zmk,behavior-mod-morph";
				label = "cm";
				mods = <(MOD_LSFT|MOD_RSFT)>;
				#binding-cells = <0>;
				bindings = <&kp COMMA>, <&comma_inner_morph>;
			};

			hm: homerow_mods {
				compatible = "zmk,behavior-hold-tap";
				label = "HOMEROW_MODS";
				#binding-cells = <2>;
				tapping-term-ms = <200>;
				quick_tap_ms = <175>;
				flavor = "tap-preferred";
				bindings = <&kp>, <&kp>;
			};

			tog_key: behavior_tog_key {
				compatible = "zmk,behavior-hold-tap";
				label = "TOGGLE KEY";
				#binding-cells = <2>;
				flavor = "tap-preferred";
				quick_tap_ms = <175>;
				tapping-term-ms = <200>;
				bindings = <&kp>, <&tog>;
			};

			mo_tog: behavior_mo_tog {
				compatible = "zmk,behavior-hold-tap";
				label = "mo_tog";
				#binding-cells = <2>;
				flavor = "hold-preferred";
				tapping-term-ms = <175>;
				bindings = <&mo>, <&tog>;
			};

			td_vimac_help: td_vimac_help {
				compatible = "zmk,behavior-tap-dance";
				label = "TAP_DANCE_VIMMAC_HELP";
				#binding-cells = <0>;
				tapping-term-ms = <200>;
				bindings = <&mt HYPER LG(LC(SLASH))>, <&kp LG(LS(SLASH))>;
			};

			td_rider_basics: td_rider_basics {
				compatible = "zmk,behavior-tap-dance";
				label = "TAP_DANCE_RIDER_BASICS";
				#binding-cells = <0>;
				tapping-term-ms = <250>;
				bindings = <&kp LG(LS(A))>, <&kp LG(LS(N))>, <&kp LG(LS(F))>;
			};
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
     &kp F1      &kp F2       &kp F3      &kp F4       &kp F5                                                                                                     &kp LG(LC(FSLH))      &kp F7       &kp F8         &kp F9    &kp F10
  &kp EQUAL      &kp N1       &kp N2      &kp N3       &kp N4  &kp N5                                                                                &kp N6       &kp N7      &kp N8       &kp N9         &kp N0  &kp MINUS
    &kp TAB       &kp SQT     &kp COMMA   &kp DOT      &kp P   &kp Y                                                                                 &kp F        &kp G       &kp C        &kp R          &kp L   &kp FSLH
    &kp ESC  &hm LALT A  &hm LCTRL O  &hm LGUI E  &hm LSHFT U   &kp I                                                                                 &kp D  &hm RSHFT H  &hm RGUI T  &hm RCTRL N  &hm RALT S    &kp BSLH
  &kp GRAVE       &kp SEMI  &kp Q       &kp J        &kp K   &kp X  &kp LSHFT  &kp LCTRL  &tog_key LGUI 1  &tog_key RGUI 1  &kp RCTRL  &kp RSHFT   &kp B        &kp M   &kp W      &kp V       &kp Z  &kp PG_UP
 &magic 2 0    &kp HOME      &kp END    &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL         &kp LALT         &kp RALT    &kp RET  &kp SPACE               &kp UP    &kp DOWN     &kp LBKT       &kp RBKT  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &kp KP_MINUS    &kp KP_PLUS     &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none     &kp KP_MULTIPLY           &kp UP          &kp KP_SLASH    &kp END                                                                               &kp KP_DOT   &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp KP_MINUS &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &reset            &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
